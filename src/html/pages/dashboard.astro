---
import Head from "@components/_head.astro";
import Footer from "@components/dashboard/_footer.astro";
import Topbar from "@components/dashboard/_topbar.astro";
import Sidenav from "@components/dashboard/_sidenav.astro";
import Scripts from "@components/_scripts.astro";

const title = "HGNeon | Dashboard";
const path = "../../dist";
const mainPage = "dashboard";
const page = "index";
---

<!doctype html>
<html lang="en">
  <!--begin::Head-->
  <head>
    <Head title={title} path={path} />

    <!-- apexcharts -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />

    <!-- jsvectormap -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/jsvectormap@1.5.3/dist/css/jsvectormap.min.css"
      integrity="sha256-+uGLJmmTKOqBr+2E6KDYs/NRsHxSkONXFHUL0fy2O/4="
      crossorigin="anonymous"
    />

  </head>
  <!--end::Head-->
  <!--begin::Body-->
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">Dashboard</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">Home</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    Dashboard
                  </li>
                </ol>
              </div>

              <!-- <script>window.location.href = './dist/pages/index.html'</script> -->
              <!--begin::Col-->
              <div class="col-md-6">
                <label class="form-label"
                  >Object</label
                >
                <select
                  class="form-select"
                  name="api_object" id="api_object"
                  required>
                  <option selected disabled value="">Choose...</option>
                </select>
                <div class="invalid-feedback">
                  Please select a valid object.
                </div>

                <br></br>

                <label class="form-label"
                  >Function</label
                >
                <select
                  class="form-select"
                  name="object_fnc" id="object_fnc"
                  required
                >
                  <option selected disabled value="">Choose...</option
                  >
                </select>
                <div class="invalid-feedback">
                  Please select a valid object.
                </div>
              
              
                <!--end::Col-->
              
                <!-- HGNeon Data Input Field -->

              
                <br></br>
                <!--begin::REST API Input-->
                <div class="card card-primary card-outline mb-4">
                  <!--begin::Header-->
                  <div class="card-header">
                    <div class="card-title">Input</div>
                  </div>
                  <!--end::Header-->
                  <!--begin::Form-->
                  <form>
                    <!--begin::Body-->
                    <div class="card-body">
                      <div id="rest_field" class="col-sm-6"></div>
                    </div>
                    <!--end::Body-->
                    <!--begin::Footer-->
                    <div class="card-footer">
                      <button type="button" class="btn btn-danger" id="reset-btn" style="margin:5px"
                        >Reset</button>
                      <button type="button" class="btn btn-primary" id="submit-btn" style="margin:5px"
                        >Submit</button>
                    </div>
                    <!--end::Footer-->
                  </form>
                  <!--end::Form-->
                </div>
                <!--end::Horizontal Form-->
              

                <!-- HGNeon Data Output Field -->
              
                <!--begin::Accordion-->
                <div class="card card-primary card-outline mb-4">
                  <!--begin::Header-->
                  <div class="card-header">
                    <div class="card-title">Output</div>
                  </div>
                  <!--end::Header-->
                  <!--begin::Body-->
                  <div class="card-body">
                    <div class="accordion" id="accordionExample">
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button
                            class="accordion-button"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#collapseData"
                            aria-expanded="true"
                            aria-controls="collapseData"
                          >
                            Data
                          </button>
                        </h2>
                        <div
                          id="collapseData"
                          class="accordion-collapse collapse show"
                          data-bs-parent="#accordionExample"
                        >
                        <div id="loading-spinner" class="spinner-border text-primary" role="status" style="margin: 10px">
                          <span class="visually-hidden">Loading...</span>
                        </div>
                        <text id="loading-text" style="margin: 10px">Fetching...</text>
                          <div class="accordion-body" id="result_field">
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!--end::Body-->
                </div>
                <!--end::Accordion-->
              
              </div>

              <!-- HGNeon Project Structure Field -->
              <div class="col-md-6">
                <br></br>
                <!--begin::Accordion-->
                <div class="card card-primary card-outline mb-6">
                  <!--begin::Header-->
                  <div class="card-header">
                    <div class="card-title">Active Projects</div>
                  </div>
                  <!--end::Header-->
                  <!--begin::Body-->
                  <div class="card-body">
                    <div class="accordion" id="accordionExample">
                      <div class="accordion-item">
                        <h2 class="accordion-header">
                          <button
                            class="accordion-button"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#collapseTenant"
                            aria-expanded="true"
                            aria-controls="collapseTenant"
                          >
                            Tenant List
                          </button>
                        </h2>
                        <div
                          id="collapseTenant"
                          class="accordion-collapse collapse show"
                          data-bs-parent="#accordionExample"
                        >
                        <div style="margin-top: 15px;">
                          <ul id="tenant-list">
                          </ul>  
                        </div> 

                        </div>
                      </div>
                    </div>
                  </div>
                  <!--end::Body-->
                </div>
                <!--end::Accordion-->
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content Header-->
      </main>
      <!--end::App Main-->
      <Footer />
    </div>
    <!--end::App Wrapper-->
    <!--begin::Script-->
    <Scripts path={path} />
    <script>
      window.open('auth/login.html')

      document.getElementById("reset-btn").addEventListener("click", resetForm, false);
      document.getElementById("submit-btn").addEventListener("click", submitForm, false);

      let spin = document.getElementById("loading-spinner");
      let load_text = document.getElementById("loading-text");
      let field = document.getElementById("rest_field");
      let result_field = document.getElementById("result_field");
      spin.style.display = "none";
      load_text.style.display = "none";

      const url = "http://192.168.49.2:30088/"

      /**
       * apiObject is the main mapping of the REST API Objects to their function parameters
       * First dimension denotes an object type (tenant, timeline etc...)
       * Second dimension is a function of that object
       * Third dimension is a list of parameters, the first element is the REST Method type followed by a colon then the number of URL params to enter
       * all proceeding elements are the URL or body parameters to be used. 
       */
      let apiObject = [{
        item: "tenant",
        subitems: [{item: "list", subitems: ["GET:1"]}, 
                  {item: "details", subitems: ["GET:2", "tenant id*"]}, 
                  {item: "create", subitems: ["POST:1", "new_tenant_id*"]}, 
                  {item: "update", subitems: ["PATCH:2", "tenant id*", "new_tenant_id*"]},
                  {item: "delete", subitems: ["DELETE:2", "tenant id*"]}
                ]
        },
        {
        item: "timeline",
        subitems: [{item: "list", subitems: ["GET:3", "tenant id*"]}, 
                  {item: "details", subitems: ["GET:4", "tenant id*", "timeline id*"]}, 
                  {item: "create", subitems: ["POST:3", "tenant id*", "new_timeline_id*"]}, 
                  {item: "update", subitems: ["PATCH:4", "tenant id*", "timeline id*"]},
                  {item: "delete", subitems: ["DELETE:4", "tenant id*", "timeline id*"]}
                ] 
        },
        {
        item: "databases", 
        subitems: [{item: "list", subitems: ["GET:5", "tenant id*", "timeline id*"]}, 
                  {item: "details", subitems: ["GET:6", "tenant id*", "timeline id*", "name*"]}, 
                  {item: "create", subitems: ["POST:5", "tenant id*", "timeline id*", "name*", "owner_name*"]}, 
                  {item: "update", subitems: ["PATCH:6", "tenant id*", "timeline id*", "database name*", "name", "new_owner"]},
                  {item: "delete", subitems: ["DELETE:6", "tenant id*", "timeline id*", "name*"]}
                ]
        },
        {
        item: "roles",
        subitems: [{item: "list", subitems: ["GET:5", "tenant id*", "timeline id*"]}, 
                  {item: "details", subitems: ["GET:6", "tenant id*", "timeline id*", "name*"]}, 
                  {item: "create", subitems: ["POST:5", "tenant id*", "timeline id*", "name*"]}, 
                  {item: "password", subitems: ["GET:7", "tenant id*", "timeline id*", "name*"]},
                  {item: "reset_password", subitems: ["POST:7", "tenant id*", "timeline id*", "name*", "password*"]},
                  {item: "delete", subitems: ["DELETE:3", "tenant id*", "timeline id*", "name*"]}
                ]
        },
        {
        item: "endpoint", 
        subitems: [{item: "list on tenant", subitems: ["GET:3", "tenant id*"]}, 
                  {item: "list all", subitems: ["GET:1"]},
                  {item: "details", subitems: ["GET:4", "tenant id*","name*"]}, 
                  {item: "create", subitems: ["POST:3", "tenant id*", "name*", "timeline*"]}, 
                  {item: "start", subitems: ["POST:5", "tenant id*","name*"]},
                  {item: "suspend", subitems: ["POST:5", "tenant id*","name*"]},
                  {item: "update", subitems: ["PATCH:4", "tenant id*","endpoint name*", "name*"]},
                  {item: "delete", subitems: ["DELETE:4", "tenant id*","name*"]}
                ]
        },
        {
        item: "operation",
        subitems: [{item: "list", subitems: ["GET:3", "tenant id*"]}, 
                  {item: "details", subitems: ["GET:4", "tenant id*", "operation id*"]}
                ]
        },
      ];

      var objectSel;
      var funcSel;

      window.onload = function() {
        objectSel = document.getElementById("api_object");
        funcSel = document.getElementById("object_fnc");

        for (var x in apiObject) {
          objectSel.options[objectSel.options.length] = new Option(apiObject[x].item, x);
        }
        objectSel.onchange = function() {
          funcSel.length = 1;
          for (var y of apiObject[this.value].subitems) {
            funcSel.options[funcSel.options.length] = new Option(y.item, y);
          }
        }

        funcSel.onchange = function(){
          let args = apiObject[objectSel.value].subitems[funcSel.selectedIndex-1].subitems;
          
          var field = document.getElementById("rest_field");

          if(field.hasChildNodes()){
            field.textContent = '';
          }

          let rest_form = document.createElement("div");

          for (var i in args){
            if (i == 0){
              let x = document.createElement("p");
              let t = document.createTextNode("REST Method: " + args[0].substr(0,args[0].length-2));
              x.appendChild(t);
              field.appendChild(x)
            } else {
              let label = document.createElement("label");
              label.style.margin = "10px";
              label.classList.add("form-label");
              label.value = args[i]
              let param = document.createElement("input");
              param.classList.add("form-control");
              param.setAttribute("id","param-" + i)
              param.setAttribute("type", "text");
              param.setAttribute("placeholder", args[i]);

              if (args[i].includes('*')) {
                param.setAttribute("required", true);
              }

              let br = document.createAttribute("br");
              
              label.appendChild(param)

              rest_form.appendChild(label);
              
            }

            field.appendChild(rest_form)
          }
        }

        generateProjectStructure()
      }

      async function generateProjectStructure(){
          const response = await fetch(url+"tenant/", {
            method: "GET",
            body: null,
            headers: {'Content-Type': 'text/plain'},
          });
          const myText = await response.text();
          console.log(myText)

          let obj = JSON.parse(myText);

          let tenant_list = document.getElementById("tenant-list");

          tenant_list.innerHTML = "";

          for (let i = 0; i < obj.length; i++){
            var li = document.createElement('li');
            li.innerHTML = obj[i]["id"];
            tenant_list.appendChild(li);
          }

          if (tenant_list.innerHTML == ""){
            tenant_list.innerHTML = "No Tenants Present"
          }
      }

      function resetForm(){
        spin.style.display = "none";
        load_text.style.display = "none";
        result_field.textContent = '';
        field.textContent = '';
      }

      async function submitForm(){          
          spin.style.display = "block";
          load_text.style.display = "block";
          load_text.innerHTML = "Fetching...";
          result_field.textContent = '';
          let args = apiObject[objectSel.value].subitems[funcSel.selectedIndex-1].subitems;
          let len = args.length;
          let req_url = url;
          
          var val = document.getElementById("param-1");

          let api_obj = apiObject[objectSel.value].item;
          let api_fnc = apiObject[objectSel.value].subitems[funcSel.selectedIndex-1].item;

          console.log("Object:" + api_obj + ", Function: " + api_fnc);

          let args_arr = args[0].split(":");
          let rest_method = args_arr[0];
          let num_param = args_arr[1];

          console.log(api_obj);

          console.log(args);

          

          let path = ""; 
          let j = 1;
          // process all of the arguments from the input fields
          for (var i = 1; i <= num_param; i++){
            switch (i){
              case 1:
                  if (api_fnc == "list all"){
                    path += "endpoint/";
                  } else {
                    path += "tenant/";
                  }
                break;
              case 2:
                  val = document.getElementById("param-"+j++);
                  if (val != null){
                    path += val.value + "/";
                  }
                break;
              case 3:
                if (api_obj == "endpoint" || api_obj == "operation"){
                    path += api_obj + "/";
                }else{
                    path += "timeline/";
                }
                break;
              case 4:
                val = document.getElementById("param-"+j++);
                if (val != null){
                  path += val.value + "/";
                }
                break;
              case 5:
                if (api_obj == "endpoint") {
                  path += api_fnc + "/";
                } else {
                  path += api_obj + "/";
                }
                break;
              case 6:
                val = document.getElementById("param-"+j++);
                if (val != null){
                  path += val.value + "/";
                }
                break;
              case 7:
                path += api_fnc + "/";
                break;
              default:
                break;
            }
          }
          req_url += path;

          val = document.getElementById("param-"+j++);

          let api_body = {};
          if (api_obj == "databases"){
            api_body = {database:{name:"", owner_name:""}};
          }

          // Iterate through leftover data and add it to the message body
          while(val != null){
            var key = val.placeholder

            if(key.includes('*')){
              key = key.substr(0,key.length-1);
            }
            
            if (api_obj == "databases"){
              api_body["database"][key] = val.value;
            } else {
              api_body[key] = val.value;
            }

            val = document.getElementById("param-"+j++);
          }

          console.log("Method: " + rest_method);
          console.log("URL: " + req_url);

          api_body = JSON.stringify(api_body);

          let content = {'Content-Type': 'application/json'}

          if (rest_method == "GET" || rest_method == "DELETE"){
            api_body = null;
            content = {'Content-Type': 'text/plain'}
          }

          console.log("Body: " + api_body);

          const response = await fetch(req_url, {
            method: rest_method,
            body: api_body,
            headers: content
          });
          const myText = await response.text(); //extract JSON from the http response
          console.log(myText)

          result_field.textContent = myText;

          load_text.innerHTML = ""
          spin.style.display = "none";

          generateProjectStructure()
      }

    </script>
    
  </body><!--end::Body-->
</html>
